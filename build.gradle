/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'engine' at '16-7-7 下午5:16' with Gradle 2.7
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
apply plugin: 'org.hidetake.ssh'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:1.0.1'
    }
}

ext {
    tomcatPath = '/data/webapps/tomcat-8'
}

remotes {
    server {
        host = '192.168.6.138'
        user = 'root'
        password = '123456'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile fileTree(dir: 'lib', include: ['*.jar'])

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile files("lib/spring-test-2.5.6.jar")
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
//            srcDirs = ['src/main/resources', 'src/main/config/dev']
            srcDirs = ['src/main/resources', 'src/main/config/prod']
        }
    }
}

//gretty {
//    contextPath = '/'
//    jvmArgs = ["-Dcfg.env=local"]
//    servletContainer = 'tomcat7'
//    httpPort = 8081
//    // ... many more properties
//}
gretty {
    httpPort = 8081
    contextPath = "/sdk-manager"
    servletContainer = 'tomcat8'
    debugPort = 8081     // default
    debugSuspend = true   // default
//    httpsEnabled = true
//    httpsPort = 4430
}

task deploy(dependsOn: war) << {
    ssh.run {
        session(remotes.server) {
            put from:"$war.archivePath.path", into: "$tomcatPath/sdkapps/sdk-manager.war"
//            execute "$tomcatPath/bin/shutdown.sh"
            execute "$tomcatPath/bin/stop.sh"
            execute "rm -rf $tomcatPath/sdkapps/sdk-manager"
            execute "unzip -oq $tomcatPath/sdkapps/"+war.archiveName+" -d $tomcatPath/sdkapps/sdk-manager"
            execute "rm -f $tomcatPath/sdkapps/sdk-manager.war"
//            execute "$tomcatPath/bin/startup.sh"
            execute "$tomcatPath/bin/restart.sh"
        }
    }
}